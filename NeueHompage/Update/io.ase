<%
	Function ReadIniFile(Path, Section, Key)
		Const ForReading   = 1
		Const ForWriting   = 2
		Const ForAppending = 8
		
		Dim intEqualPos
		Dim objFSO, objIniFile
		Dim strFilePath, strKey, strLeftString, strLine, strSection
		
		Set objFSO = CreateObject( "Scripting.FileSystemObject" )
		
		ReadIni     = ""
		strFilePath = Trim(Path)
		strSection  = Trim(Section)
		strKey      = Trim(Key)
		
		If objFSO.FileExists( strFilePath ) Then
			Set objIniFile = objFSO.OpenTextFile( strFilePath, ForReading, False )
			Do While objIniFile.AtEndOfStream = False
				strLine = Trim( objIniFile.ReadLine )
				
				' Check if section is found in the current line
				If LCase( strLine ) = "[" & LCase( strSection ) & "]" Then
					strLine = Trim( objIniFile.ReadLine )
					
					' Parse lines until the next section is reached
					Do While Left( strLine, 1 ) <> "["
						' Find position of equal sign in the line
						intEqualPos = InStr( 1, strLine, "=", 1 )
						If intEqualPos > 0 Then
							strLeftString = Trim( Left( strLine, intEqualPos - 1 ) )
							' Check if item is found in the current line
							If LCase( strLeftString ) = LCase( strKey ) Then
								ReadIni = Trim( Mid( strLine, intEqualPos + 1 ) )
								' In case the item exists but value is blank
								If ReadIni = "" Then
									ReadIni = " "
								End If
								' Abort loop when item is found
								Exit Do
							End If
						End If
						
						' Abort if the end of the INI file is reached
						If objIniFile.AtEndOfStream Then _
							Exit Do
						
						' Continue with next line
						strLine = Trim( objIniFile.ReadLine )
					Loop
					Exit Do
				End If
			Loop
			objIniFile.Close
		End If
		ReadIniFile = ReadIni
	End Function
	
	Sub WriteIniFile( myFilePath, mySection, myKey, myValue )
		Const ForReading   = 1
		Const ForWriting   = 2
		Const ForAppending = 8
		
		Dim blnInSection, blnKeyExists, blnSectionExists, blnWritten
		Dim intEqualPos
		Dim objFSO, objNewIni, objOrgIni, wshShell
		Dim strFilePath, strFolderPath, strKey, strLeftString
		Dim strLine, strSection, strTempDir, strTempFile, strValue
		
		strFilePath = Trim( myFilePath )
		strSection  = Trim( mySection )
		strKey      = Trim( myKey )
		strValue    = Trim( myValue )
		
		Set objFSO   = CreateObject( "Scripting.FileSystemObject" )
		Set wshShell = CreateObject( "WScript.Shell" )
		
		strTempDir  = wshShell.ExpandEnvironmentStrings( "%TEMP%" )
		strTempFile = objFSO.BuildPath( strTempDir, objFSO.GetTempName )
		
		Set objOrgIni = objFSO.OpenTextFile( strFilePath, ForReading, True )
		Set objNewIni = objFSO.CreateTextFile( strTempFile, False, False )
		
		blnInSection     = False
		blnSectionExists = False
		' Check if the specified key already exists
		blnKeyExists     = ( ReadIniFile( strFilePath, strSection, strKey ) <> "" )
		blnWritten       = False
		
		' Check if path to INI file exists, quit if not
		strFolderPath = Mid( strFilePath, 1, InStrRev( strFilePath, "\" ) )
		If Not objFSO.FolderExists ( strFolderPath ) Then
		WScript.Echo "Error: WriteIni failed, folder path (" _
		& strFolderPath & ") to ini file " _
		& strFilePath & " not found!"
		Set objOrgIni = Nothing
		Set objNewIni = Nothing
		Set objFSO    = Nothing
		WScript.Quit 1
		End If
		
		While objOrgIni.AtEndOfStream = False
		strLine = Trim( objOrgIni.ReadLine )
		If blnWritten = False Then
		If LCase( strLine ) = "[" & LCase( strSection ) & "]" Then
		blnSectionExists = True
		blnInSection = True
		ElseIf InStr( strLine, "[" ) = 1 Then
		blnInSection = False
		End If
		End If
		
		If blnInSection Then
		If blnKeyExists Then
		intEqualPos = InStr( 1, strLine, "=", vbTextCompare )
		If intEqualPos > 0 Then
		strLeftString = Trim( Left( strLine, intEqualPos - 1 ) )
		If LCase( strLeftString ) = LCase( strKey ) Then
		' Only write the key if the value isn't empty
		' Modification by Johan Pol
		If strValue <> "<DELETE_THIS_VALUE>" Then
		objNewIni.WriteLine strKey & "=" & strValue
		End If
		blnWritten   = True
		blnInSection = False
		End If
		End If
		If Not blnWritten Then
		objNewIni.WriteLine strLine
		End If
		Else
		objNewIni.WriteLine strLine
		' Only write the key if the value isn't empty
		' Modification by Johan Pol
		If strValue <> "<DELETE_THIS_VALUE>" Then
		objNewIni.WriteLine strKey & "=" & strValue
		End If
		blnWritten   = True
		blnInSection = False
		End If
		Else
		objNewIni.WriteLine strLine
		End If
		Wend
		
		If blnSectionExists = False Then ' section doesn't exist
		objNewIni.WriteLine
		objNewIni.WriteLine "[" & strSection & "]"
		' Only write the key if the value isn't empty
		' Modification by Johan Pol
		If strValue <> "<DELETE_THIS_VALUE>" Then
		objNewIni.WriteLine strKey & "=" & strValue
		End If
		End If
		
		objOrgIni.Close
		objNewIni.Close
		
		' Delete old INI file
		objFSO.DeleteFile strFilePath, True
		' Rename new INI file
		objFSO.MoveFile strTempFile, strFilePath
		
		Set objOrgIni = Nothing
		Set objNewIni = Nothing
		Set objFSO    = Nothing
		Set wshShell  = Nothing
	End Sub	
	
	Function UpperDir(Pfad, Trenner)
		If Right(Pfad, 1) = Trenner Then _
			Pfad = Left(Pfad, Len(Pfad) - 1)
		UpperDir = Left(Pfad, InStrRev(Pfad, Trenner)) 
	End Function
	
	Function CommonFiles()
		CommonFiles = UpperDir(Server.Mappath("/"), "\")
	End Function
	
	Function DateiExist(f_File)
		DateiExist = False
		On Error Resume Next
		Set fs = Server.CreateObject("Scripting.FileSystemObject")
		' Versuche Datei zu oeffnen
			Set f = fs.GetFile(f_File)

			If Err.Number = 0 Then DateiExist = True
		Set fs = Nothing
		On Error GoTo 0
	End Function
	
	Private Sub writeText(File, sText)
		Dim fso, txf
		
		On Error Resume Next	
		Set fso = CreateObject("Scripting.FileSystemObject")
		Set txf = fso.CreateTextfile(File, True)
		txf.Write sText
		txf.Close
		
		Set txf = Nothing
		Set fso = Nothing
		On Error GoTo 0
	End Sub
	
	Private Sub AppendText(File, sText)
		Dim fso, txf
		
		On Error Resume Next	
		Set fso = CreateObject("Scripting.FileSystemObject")
		Set txf = fso.OpenTextFile(File, 8, True)
		txf.Write sText
		txf.Close
		
		Set txf = Nothing
		Set fso = Nothing
		On Error GoTo 0
	End Sub
	
	Private Function readText(File)
		Dim fso, txf
		
		On Error Resume Next	
		Set fso = CreateObject("Scripting.FileSystemObject")
		Set txf = fso.OpenTextfile(File, 1)
		If Not txf.AtEndOfStream Then _
			readText = txf.ReadAll
		txf.Close
		
		Set txf = Nothing
		Set fso = Nothing
		On Error GoTo 0
	End Function
	
	Private Function DeleteFile(f_File)
		Dim fso
		
		On Error Resume Next
		Set fso = CreateObject("Scripting.FileSystemObject")
  		fso.DeleteFile(f_File)
		If Err.Number <> 0 Then
			DeleteFile = False
		Else
			DeleteFile = True
		End If
		Set fso = Nothing
		On Error GoTo 0
	End Function	
	
	Private Function GetTempFile()
		Dim tfolder, tname, tfile, fso
		Const TemporaryFolder = 2
		
		Set fso = CreateObject("Scripting.FileSystemObject")
		Set tfolder = fso.GetSpecialFolder(TemporaryFolder)
		tname = fso.GetTempName
		Set tfile = tfolder.CreateTextFile(tname)
		tfile.Close
		GetTempFile = tfolder.Path & "\" & tName
		Set fso = Nothing
	End Function
	
	Private Function GetTempFileByName(name)
		Dim tfolder, tname, tfile, fso
		Const TemporaryFolder = 2
		
		Set fso = CreateObject("Scripting.FileSystemObject")
		Set tfolder = fso.GetSpecialFolder(TemporaryFolder)		
		Set tfile = tfolder.CreateTextFile(name, True)
		tfile.Close
		GetTempFileByName = tfolder.Path & "\" & Name
		Set fso = Nothing
	End Function
	
	Function IncludeTrailingBackslash(aPath)
		If Right(aPath, 1) <> "\" Then
			IncludeTrailingBackslash = aPath & "\"
		Else
			IncludeTrailingBackslash = aPath
		End If
	End Function
	
	Function ChangeFileExt(cFile, cNewExt)
		Dim OldExt
		On Error Resume Next
		OldExt = Mid(cFile, InStrRev(cFile, "."))
		ChangeFileExt = Replace(cFile, OldExt, cNewExt)
		On Error GoTo 0
	End Function
	
	Function BinaryWrite(sFile, sBin)
		Set sStream = CreateObject("ADODB.Stream")
		sStream.Type = 1
		sStream.Open
		sStream.Write sBin
		sStream.SaveToFile sFile, 2
		sStream.Close
		Set sStream = Nothing
	End Function

	Function BinaryRead(sFile)
		Set sStream = CreateObject("ADODB.Stream")
		sStream.Type = 1
		sStream.Open
		sStream.LoadFromFile sFile
		BinaryRead = sStream.Read(-1)
		sStream.Close
		Set sStream = Nothing
	End Function

	Function GetFileAge(sFile)
		Dim fso, f
		Set fso = CreateObject("Scripting.FileSystemObject")
		Set f = fso.GetFile(sFile)
		GetFileAge = f.DateLastModified
		Set f = Nothing
		Set fso = Nothing
	End Function
	
	Function GetFileContentsForExecution(sTargetFile)
	  Dim oFSO, sContents
	  
	  'Obtain a reference to the FileSystemObject
	  Set oFSO = Server.CreateObject("Scripting.FileSystemObject")
	  
	  'Obtain the file contents

	  sContents = oFSO.OpenTextFile(Server.MapPath(sTargetFile)).ReadAll
	  Set oFSO = Nothing 'reference to the FileSystemObject
	
	  'Remove the ASP scripting tags
	  sContents = Replace (sContents, "<" & "%", "")
	  sContents = Replace (sContents, "%" & ">", "")
	  sContents = Replace (sContents, "<" & "SCRIPT LANGUAGE=""VBScript"" RUNAT=""server""" & ">", "")
	  sContents = Replace (sContents, "</SCRIPT>", "")
	  sContents = Replace (sContents, "<" & "script language=""vbscript"" runat=""server""" & ">", "")
	  sContents = Replace (sContents, "</script>", "")
	  GetFileContentsForExecution = sContents
	End Function
	
	Sub ShellExecute(Command, WaitFor)
		Dim s_Conn
		Set s_Conn = New dbConnection
		s_Conn.Open ODBCSQL
		
		If WaitFor Then
			v_SQL = "EXEC mf_ShellExecute '" & Command & "', 0, 1"
		Else
			v_SQL = "EXEC mf_ShellExecute '" & Command & "', 0, 0"
		End If
		s_Conn.ExecuteNoRecords(v_SQL)
	End Sub

	Function FileSize(file)
		Dim filesys, ffile, Result
		Set filesys = Server.CreateObject("Scripting.FileSystemObject")
		Set ffile = filesys.GetFile(file)
		Result = ffile.Size
		FileSize = Result
	End Function

	Sub FileCopy(f_source, f_destination, f_overwrite)
		Dim fs
		Dim f
		
		Set fs = Server.CreateObject("Scripting.FileSystemObject")
    	Set f = fs.GetFile(f_source)
		f.Copy f_destination, f_overwrite
		Set f = Nothing
		Set fs = Nothing
		On Error GoTo 0
	End Sub

	Function FolderExists(sFolder)
		FolderExists = False
		Dim fso, f
		Set fso = Server.CreateObject("Scripting.FileSystemObject")
		FolderExists = fso.FolderExists(sFolder)
	End Function

	Function FolderCreate(ByVal Pfad)
		err.Clear
		On Error Resume Next
		Set fs = Server.CreateObject("Scripting.FileSystemObject")
		If Left(Pfad,1) = "\" Then
			arrLaufwerk = Split(Pfad, "\")
			Laufwerk = "\\" & arrLaufwerk(2) & "\" & arrLaufwerk(3) 
		Else
			laufwerk = Left (Pfad,2)
		End If
		Set myRegex = New RegExp
		regex = "(^\\{2}[^/\\<>|\*]*\\)|(^[a-zA-Z:]*\\)"
		myRegex.Pattern = regex
		myRegex.IgnoreCase = True
		myRegex.Global = False
		Pfad = myRegex.Replace(Pfad, "")
		regex = "\\$"
		myRegex.Pattern = regex
		Pfad = myRegex.Replace(Pfad, "")
		v_path = laufwerk
		mynewfolders = Split(Pfad,"\")
		For v_index = 0 to Ubound(mynewfolders)
			v_path = v_path & "\" & mynewfolders(v_index)
			If Not (fs.FolderExists(v_path)) Then _
				Set bal = fs.CreateFolder(v_path)
		Next
		Set myRegex = Nothing
		Set fs = Nothing
		If err.Number=0 Then 
			FolderCreate = True
		Else
			FolderCreate = False
		End If
		err.Clear
	End Function
%>